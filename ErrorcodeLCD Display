#include <LiquidCrystal_I2C.h>
#include <ESP8266WiFi.h>
#include "secrets.h"
#include "ThingSpeak.h"

char ssid[] = SECRET_SSID;
char pass[] = SECRET_PASS;
int keyIndex = 0;
WiFiClient client;

unsigned long Securityandenvironmentatthegallery = Security_and_environment_at_the_gallery;

int statusCode = 0;
int field[8] = {1, 2, 3, 4, 5, 6, 7, 8};

LiquidCrystal_I2C lcd(0x27, 20, 4);
char error_array[10][17] = {"Humidity low    ", "Humidity high   ", "Flash detected  ", "Temp too high   ", "Temp too low    ", "Motion detected ", "Laser triggered ", "Security OFF    ", "Security ON     ","System OK       "};

unsigned long previousMillis = 0;
const long interval = 5000;  // Update interval in milliseconds

int currentErrorCode = 0;

void setup() {
  Serial.begin(115200);
  while (!Serial) {
    ;
  }

  lcd.init();
  lcd.backlight();

  WiFi.mode(WIFI_STA);
  ThingSpeak.begin(client);

  if (WiFi.status() != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(SECRET_SSID);
    while (WiFi.status() != WL_CONNECTED) {
      WiFi.begin(ssid, pass);
      Serial.print(".");
      delay(5000);
    }
    Serial.println("\nConnected");
  }
}

void clear_display(){
    lcd.setCursor(0, 0);
  lcd.print("                ");
  lcd.setCursor(0, 1);
  lcd.print("                ");
}

void display_error(int errorID) {
  Serial.println("Displaying error with ID: " + String(errorID));
  if(errorID < 7){
    lcd.setCursor(0, 0);
  lcd.print("ERROR CODE: ");
  lcd.print(errorID);
  }
  lcd.setCursor(0, 1);
  lcd.print(error_array[errorID]);
}

unsigned long lastErrorDisplayTime = 0;
const long errorDisplayInterval = 5000;  // Delay between error displays in milliseconds

int lastErrorCode = -1;  // Initialize to an invalid error code

void loop() {
  statusCode = ThingSpeak.readMultipleFields(Securityandenvironmentatthegallery);

  if (statusCode == 200) {
    float humidity = ThingSpeak.getFieldAsFloat(field[2]);
    float temperature = ThingSpeak.getFieldAsFloat(field[3]);
    int motionStatus = ThingSpeak.getFieldAsInt(field[6]);
    int securityStatus = ThingSpeak.getFieldAsInt(field[7]);

    // Check if humidity and temperature values are valid
    
      // Reset the display for each iteration
      clear_display();

      int errorCode = -1;  // Initialize to an invalid error code

      // Handle humidity-related errors
      if (humidity > 40) {
        Serial.println("Error in Field 3 (Less than 40)");
        display_error(0);
        Serial.print("Humidity is");
        Serial.println(humidity);
        errorCode = 0;
      } else if (humidity < 65) {
        Serial.println("Error in Field 3 (Greater than 65)");
        display_error(1);
        errorCode = 1;
      }

      // Handle temperature-related errors
      if (temperature > 15) {
        Serial.println("Error in Field 4 (Less than 15)");
        display_error(3);
        Serial.print("temp is");
        Serial.println(temperature);
        errorCode = 3;
      } else if (temperature < 27) {
        Serial.println("Error in Field 4 (Greater than 27)");
        display_error(4);
        errorCode = 4;
      }

      // Handle other errors (motionStatus and securityStatus)
      if (motionStatus == 1) {
        Serial.println("Error in Field 7 (Motion detected)");
        display_error(5);
        errorCode = 5;
      }

      if (securityStatus == 1) {
        Serial.println("Error in Field 8 (Security ON)");
        display_error(7);
        errorCode = 7;
      }

      // If no errors, display system OK
      if (errorCode == -1) {
        Serial.println("System OK");
        display_error(9);
      }

      // Check if the error code has changed
      if (errorCode != lastErrorCode) {
        lastErrorCode = errorCode;
        lastErrorDisplayTime = millis();
      }
     else {
      //humidity or temperature is not available
      Serial.println("Humidity or temperature not available");
      display_error(9);
      lastErrorCode = 9;
      lastErrorDisplayTime = millis();
    }
  } else {
    Serial.print("Problem reading channel. HTTP error code " + String(statusCode));
  }

  // Check if it's time to display the next error
  if (millis() - lastErrorDisplayTime >= errorDisplayInterval) {
    unsigned long currentMillis = millis();
    lastErrorDisplayTime = currentMillis;

    // Update the error code and display the error
    lastErrorCode = (lastErrorCode + 1) % 10;  // for 10 error codes
    display_error(lastErrorCode);
  }

  // Delay before the next iteration
  delay(2000);
}

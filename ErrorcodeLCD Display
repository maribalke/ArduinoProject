#include <LiquidCrystal_I2C.h>
#include <ESP8266WiFi.h>
#include "secrets.h"
#include "ThingSpeak.h"

char ssid[] = SECRET_SSID;
char pass[] = SECRET_PASS;
int keyIndex = 0;
WiFiClient client;

unsigned long Securityandenvironmentatthegallery = Security_and_environment_at_the_gallery;

int statusCode = 0;
int field[8] = {1, 2, 3, 4, 5, 6, 7, 8};

LiquidCrystal_I2C lcd(0x27, 20, 4);
char error_array[10][17] = {"Humidity low    ", "Humidity high   ", "Flash detected  ", "Temp too high   ", "Temp too low    ", "Motion detected ", "Laser triggered ", "Security OFF    ", "Security ON     ","System OK       "};

unsigned long previousMillis = 0;
const long interval = 5000;  // Update interval in milliseconds

int currentErrorCode = 0;

void setup() {
  Serial.begin(115200);
  while (!Serial) {
    ;
  }

  lcd.init();
  lcd.backlight();

  WiFi.mode(WIFI_STA);
  ThingSpeak.begin(client);

  if (WiFi.status() != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(SECRET_SSID);
    while (WiFi.status() != WL_CONNECTED) {
      WiFi.begin(ssid, pass);
      Serial.print(".");
      delay(5000);
    }
    Serial.println("\nConnected");
  }
}

void display_error(int errorID) {
  Serial.println("Displaying error with ID: " + String(errorID));
  
  lcd.setCursor(0, 0);
  lcd.print("ERROR CODE: ");
  lcd.print(errorID);
  lcd.setCursor(0, 1);
  lcd.print(error_array[errorID]);
}

void loop() {
  statusCode = ThingSpeak.readMultipleFields(Securityandenvironmentatthegallery);

  if (statusCode == 200) {
    if (ThingSpeak.getFieldAsInt(field[0]) == 1) {
      Serial.println("Error in Field 1");
      display_error(6);
    } else if (ThingSpeak.getFieldAsInt(field[1]) == 1) {
      Serial.println("Error in Field 2");
      display_error(6);
    } else if (ThingSpeak.getFieldAsFloat(field[2]) < 40) {
      Serial.println("Error in Field 3 (Less than 40)");
      display_error(0);
    } else if (ThingSpeak.getFieldAsFloat(field[2]) > 65) {
      Serial.println("Error in Field 3 (Greater than 65)");
      display_error(1);
    } else if (ThingSpeak.getFieldAsFloat(field[3]) < 15) {
      Serial.println("Error in Field 4 (Less than 15)");
      display_error(3);
    } else if (ThingSpeak.getFieldAsFloat(field[3]) > 27) {
      Serial.println("Error in Field 4 (Greater than 27)");
      display_error(4);
    } else if (ThingSpeak.getFieldAsInt(field[4]) == 1) {
      Serial.println("Error in Field 5");
      display_error(8);
    } else if (ThingSpeak.getFieldAsInt(field[5]) == 1) {
      Serial.println("Error in Field 6");
      display_error(2);
    } else if (ThingSpeak.getFieldAsInt(field[6]) == 1) {
      Serial.println("Error in Field 7");
      display_error(5);
    } else if (ThingSpeak.getFieldAsInt(field[7]) == 1) {
      Serial.println("Error in Field 8");
      display_error(5);
    }
    else {
      display_error(9);
    }

    unsigned long currentMillis = millis();
    if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;
      
      currentErrorCode = (currentErrorCode + 1) % 10;  // Assuming you have 10 error codes
      
      display_error(currentErrorCode);
    }
  } else {
    Serial.print("Problem reading channel. HTTP error code " + String(statusCode));
  }

  delay(2000);
}

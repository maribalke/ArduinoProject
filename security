#include <ESP8266WiFi.h>
#include "secrets.h"
#include "ThingSpeak.h"  // always include thingspeak header file after other header files and custom macros

//Network connectivity constants
char ssid[] = SECRET_SSID;  // your network SSID (name)
char pass[] = SECRET_PASS;  // your network password
int keyIndex = 0;           // your network key Index number (needed only for WEP)
WiFiClient client;
unsigned long myChannelNumber = SECRET_CH_ID;
const char* myWriteAPIKey = SECRET_WRITE_APIKEY;
const char* myReadAPIKey = SECRET_READ_APIKEY;

//Variables for laser sensor
int laser_sensor_pin = D1;  //Pin for output from laser sensor
int laser_pin = D4;
bool laser_triggered = false;

//Variables for motion sensor
int motion_sensor_pin = D0;  //Pin connected to motion sensors output
bool motion_triggered = false;

//Variables for the general alarm system
int LED_output = D3;  //LED for testing
bool channel_7_updated = false;
bool channel_8_updated = false;
bool allow_channel_reset = true;


void setup() {
  Serial.begin(9600);  // Initialize serial
  WiFi.mode(WIFI_STA);
  ThingSpeak.begin(client);  // Initialize ThingSpeak
  // Pins for laser sensor
  pinMode(laser_sensor_pin, INPUT);
  pinMode(LED_output, OUTPUT);
  pinMode(laser_pin, OUTPUT);
  // Pins for motion sensor
  pinMode(motion_sensor_pin, INPUT_PULLUP);
  // Reset back-end values
  wifi_connecter();
  ThingSpeak.setField(7, 0);
  ThingSpeak.setField(8, 0);
  int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
  if (x == 200) {
    Serial.println("Channel reset successful.");
  } else {
    Serial.println("Problem resetting channel. HTTP error code " + String(x));
  }
  // Turn on laser
  digitalWrite(laser_pin, HIGH);
}
// Function for the laser sensor
bool laser_detector() {
  if (digitalRead(laser_sensor_pin)) {
    //Serial.println("Alarm triggered");
    return true;
  } else {
    //Serial.println("No alarm triggered");
    return false;
  }
}

// Function for the motion detector
bool motion_detector() {
  delay(100);
  if (digitalRead(motion_sensor_pin) == HIGH) {
    //Serial.println("Movement detected");
    return true;
  } else {
    //Serial.println("Movement not detected");
    return false;
  }
}

//Send data to a single field
int send_data(int channel, int data) {
  int x = ThingSpeak.writeField(myChannelNumber, channel, data, myWriteAPIKey);
  if (x == 200) {
    Serial.println("Channel update successful.");
  } else {
    Serial.println("Problem updating channel. HTTP error code " + String(x));
  }
  return x;
}

//Wifi connection function
void wifi_connecter() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(SECRET_SSID);
    while (WiFi.status() != WL_CONNECTED) {
      WiFi.begin(ssid, pass);
      Serial.print(".");
      delay(5000);
    }
    Serial.println("\nConnected.");
  }
}

void loop() {
  wifi_connecter();
  // Reset logic for reading and reacting to keypads status
  if (ThingSpeak.readLongField(myChannelNumber, 5, myReadAPIKey) == 1) {
    if (allow_channel_reset) {
      Serial.println("Thingspeak reset initiated");
      ThingSpeak.setField(7, 0);
      ThingSpeak.setField(8, 0);
      if (ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey) != 200) {
        Serial.println("Failed to reset from ThingSpeak keypad");
      } else {
        allow_channel_reset = false;
      }
    }
  }

  // Manual reset of alarm and toggle keypad reset permission
  if (Serial.available() > 0) {
    char input = Serial.read();
    if (input == 'R') {
      allow_channel_reset = !allow_channel_reset;
      Serial.println("Manual reset triggered");
      channel_7_updated = false;
      channel_8_updated = false;
      motion_triggered = false;
      laser_triggered = false;
      ThingSpeak.setField(7, 0);
      ThingSpeak.setField(8, 0);
      if (ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey) != 200) {
        Serial.println("Reset Failed");
      }
    }
  }
  // Check motion sensor and save state
  if (motion_detector()) {
    digitalWrite(LED_output, HIGH);
    motion_triggered = true;
  }
  // Check laser sensor and save state
  if (laser_detector()) {
    digitalWrite(LED_output, HIGH);
    laser_triggered = true;
  }
  // Send data based on saved states
  if (motion_triggered && !channel_7_updated) {
    if (send_data(7, 1) == 200) {
      channel_7_updated = true;
      motion_triggered = false;
    }
  }
  if (laser_triggered && !channel_8_updated) {
    if (send_data(8, 1) == 200) {
      channel_8_updated = true;
      laser_triggered = false;
    }
  }
  // Turn off LED if nothing is triggered
  if (!motion_detector() && !laser_detector()) {
    digitalWrite(LED_output, LOW);
  }
}
